name: "Unit Tests (CUDA)"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  UnitTest:
    runs-on: [ self-hosted, A100 ]
    defaults:
      run:
        shell: bash
    timeout-minutes: 30
    strategy:
      matrix:
        cuda: [ cuda11.8, cuda12.2 ]
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.cuda }}
      cancel-in-progress: true
    container:
      image: "ghcr.io/microsoft/ark/ark:base-dev-${{ matrix.cuda }}"
      options: --privileged --ipc=host --gpus=all --ulimit memlock=-1:-1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: LockGPUClock
        run: |
          sudo nvidia-smi -pm 1
          for i in $(seq 0 $(( $(nvidia-smi -L | wc -l) - 1 ))); do
            sudo nvidia-smi -ac $(nvidia-smi --query-gpu=clocks.max.memory,clocks.max.sm --format=csv,noheader,nounits -i $i | sed 's/\ //') -i $i
          done

      - name: Dubious ownership exception
        run: |
          git config --global --add safe.directory /__w/ark/ark

      - name: Build
        run: |
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=Debug ..
          make -j ut ark_py

      - name: Run C++ UT
        run: |
          cd build
          ARK_ROOT=$PWD ctest --stop-on-failure --verbose --schedule-random
          lcov --capture --directory . --output-file cpp_coverage.info
          lcov --remove cpp_coverage.info \
              '/usr/*' \
              '/tmp/*' \
              '*/build/*' \
              '*/third_party/*' \
              '*/ark/*_test.*' \
              '*/examples/*' \
              '*/python/*' \
              '*/ark/unittest/unittest_utils.cpp' \
              --output-file cpp_coverage.info
          lcov --list cpp_coverage.info

      - name: Install Python Dependencies
        run: |
          python3 -m pip install -r requirements.txt

      - name: Run Python UT
        run: |
          cd build
          PYTHONPATH=$PWD/python ARK_ROOT=$PWD python3 -m pytest \
              --cov=python/ark \
              --cov-report lcov:py_coverage.info \
              --verbose \
              ../python/unittest/test.py

      - name: Report Coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          cd build
          lcov -a cpp_coverage.info -a py_coverage.info -o coverage.info
          bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"

      - name: Install Python
        run: |
          python3 -m pip install .

      - name: Run Tutorials
        run: |
          python3 ./examples/tutorial/quickstart_tutorial.py
