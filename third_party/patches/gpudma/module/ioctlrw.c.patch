# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

--- ioctlrw.c
+++ ioctlrw.c
@@ -34,7 +34,7 @@
     if(entry) {
         res = nvidia_p2p_free_page_table(entry->page_table);
         if(res == 0) {
-            printk(KERN_ERR"%s(): nvidia_p2p_free_page_table() - OK!\n", __FUNCTION__);
+            //printk(KERN_ERR"%s(): nvidia_p2p_free_page_table() - OK!\n", __FUNCTION__);
             //entry->virt_start = 0ULL;
             //entry->page_table = 0;
         } else {
@@ -86,7 +86,7 @@
     param.page_count = entry->page_table->entries;
     param.handle = entry;
 
-    printk(KERN_ERR"%s(): param.handle: %p\n", __FUNCTION__, param.handle);
+    //printk(KERN_ERR"%s(): param.handle: %p\n", __FUNCTION__, param.handle);
 
     if(copy_to_user((void *)arg, &param, sizeof(struct gpudma_lock_t))) {
         printk(KERN_ERR"%s(): Error in copy_from_user()\n", __FUNCTION__);
@@ -96,7 +96,7 @@
 
     list_add_tail(&entry->list, &drv->table_list);
 
-    printk(KERN_ERR"%s(): Add new entry. handle: %p\n", __FUNCTION__, entry->handle);
+    //printk(KERN_ERR"%s(): Add new entry. handle: %p\n", __FUNCTION__, entry->handle);
 
     return 0;
 
@@ -129,8 +129,8 @@
         if(entry) {
             if(entry->handle == param.handle) {
 
-                printk(KERN_ERR"%s(): param.handle = %p\n", __FUNCTION__, param.handle);
-                printk(KERN_ERR"%s(): entry.handle = %p\n", __FUNCTION__, entry->handle);
+                //printk(KERN_ERR"%s(): param.handle = %p\n", __FUNCTION__, param.handle);
+                //printk(KERN_ERR"%s(): entry.handle = %p\n", __FUNCTION__, entry->handle);
 
                 if(entry->virt_start && entry->page_table) {
                     error = nvidia_p2p_put_pages(0, 0, entry->virt_start, entry->page_table);
@@ -140,7 +140,7 @@
                     }
                     //entry->virt_start = 0ULL;
                     //entry->page_table = 0;
-                    printk(KERN_ERR"%s(): nvidia_p2p_put_pages() - Ok!\n", __FUNCTION__);
+                    //printk(KERN_ERR"%s(): nvidia_p2p_put_pages() - Ok!\n", __FUNCTION__);
                 }
 
                 list_del(pos);
@@ -180,8 +180,8 @@
         if(entry) {
             if(entry->handle == header.handle) {
 
-                printk(KERN_ERR"%s(): param.handle = %p\n", __FUNCTION__, header.handle);
-                printk(KERN_ERR"%s(): entry.handle = %p\n", __FUNCTION__, entry->handle);
+                //printk(KERN_ERR"%s(): param.handle = %p\n", __FUNCTION__, header.handle);
+                //printk(KERN_ERR"%s(): entry.handle = %p\n", __FUNCTION__, entry->handle);
 
                 if(!entry->page_table) {
                     printk(KERN_ERR"%s(): Error - memory not pinned!\n", __FUNCTION__);
@@ -208,7 +208,7 @@
                         //printk(KERN_ERR"%s(): %02d - 0x%llx\n", __FUNCTION__, i, param->pages[i]);
                     }
                 }
-                printk(KERN_ERR"%s(): page_count = %ld\n", __FUNCTION__, (long int)param->page_count);
+                //printk(KERN_ERR"%s(): page_count = %ld\n", __FUNCTION__, (long int)param->page_count);
                 param->handle = header.handle;
                 if(copy_to_user((void *)arg, param, size)) {
                     printk(KERN_DEBUG"%s(): Error in copy_to_user()\n", __FUNCTION__);
