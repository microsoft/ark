# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

--- gemm.h
+++ gemm.h
@@ -67,6 +67,7 @@ struct Gemm {
   /// Warp count (concept: GemmShape)
   using WarpCount = typename Mma::WarpCount;
   static int const kThreadCount = 32 * WarpCount::kCount;
+  static int const ThreadMask = kThreadCount - 1;
 
   /// Parameters structure
   struct Params {
@@ -235,7 +236,7 @@ struct Gemm {
     int gemm_k_iterations = (problem_size_k - tb_offset_A.column() + Mma::Shape::kK - 1) / Mma::Shape::kK;
 
     // Compute position within threadblock
-    int thread_idx = threadIdx.x;
+    int thread_idx = threadIdx.x & ThreadMask;
 
     // Construct iterators to A and B operands
     typename Mma::IteratorA iterator_A(
@@ -256,8 +257,8 @@ struct Gemm {
 
     // Broadcast the warp_id computed by lane 0 to ensure dependent code
     // is compiled as warp-uniform.
-    int warp_idx = __shfl_sync(0xffffffff, threadIdx.x / 32, 0);
-    int lane_idx = threadIdx.x % 32;
+    int warp_idx = __shfl_sync(0xffffffff, (threadIdx.x & ThreadMask) / 32, 0);
+    int lane_idx = (threadIdx.x & ThreadMask) % 32;
 
     //
     // Main loop
